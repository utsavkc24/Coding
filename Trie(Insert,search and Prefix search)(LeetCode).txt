Implement Trie (Prefix Tree)
Solution
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.
Java	
1
class TrieNode{
2
    boolean isWord;
3
    public char val;
4
    
5
    public TrieNode[] child = new TrieNode[26];
6
    public TrieNode(){
7
    }
8
    TrieNode(char c ){
9
        TrieNode node = new TrieNode();
10
        node.val = c;
11
    }
12
    
13
}
14
class Trie {
15
    private TrieNode root;
16
    /** Initialize your data structure here. */
17
    public Trie() {
18
    root = new TrieNode();
19
        root.val = ' ';
20
    
21
    }
22
    
23
    /** Inserts a word into the trie. */
24
    public void insert(String word) {
25
        TrieNode curr = root;
26
        
27
        for(int i = 0 ; i < word.length(); i++)
28
        {
29
            char c = word.charAt(i);
30
            if(curr.child[c - 'a'] == null)
31
                curr.child[c - 'a'] = new TrieNode();
32
            
33
            curr = curr.child[c - 'a'];
34
            
35
        }
36
        curr.isWord = true;
37
    }
38
    
39
    /** Returns if the word is in the trie. */
40
    public boolean search(String word) {
41
          TrieNode curr = root;
42
        
43
        for(int i = 0 ; i < word.length(); i++)
44
        {
45
            char c = word.charAt(i);
46
            if(curr.child[c - 'a'] == null)
47
               return false;
48
            
49
            curr = curr.child[c - 'a'];
50
            
51
        }
52
        return curr.isWord;
53
    }
54
    
55
    /** Returns if there is any word in the trie that starts with the given prefix. */
56
    public boolean startsWith(String prefix) {
57
          TrieNode ws = root; 
58
        for(int i = 0; i < prefix.length(); i++){
59
            char c = prefix.charAt(i);
60
            if(ws.child[c - 'a'] == null) return false;
61
            ws = ws.child[c - 'a'];
62
        }
63
        return true;
64
    }
65
   
66
}
67
â€‹
68
/**
69
 * Your Trie object will be instantiated and called as such:
70
 * Trie obj = new Trie();
71
 * obj.insert(word);
72
 * boolean param_2 = obj.search(word);
73
 * boolean param_3 = obj.startsWith(prefix);
74
 */
